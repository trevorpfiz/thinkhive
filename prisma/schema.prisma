// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  directUrl    = env("MIGRATE_DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  id_token_expires_in      Int?
  session_state            String?
  not_before               Int?
  profile_info             String? @db.Text
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                 String         @id @default(cuid())
  name               String?
  email              String?        @unique
  emailVerified      DateTime?
  image              String?
  stripeCustomerId   String?        @unique
  credits            Float          @default(30) // 15 decimal
  additionalCredits  Float          @default(0)
  uploadUsage        Int            @default(0)
  embeddingUsage     Int            @default(0)
  llmUsage           Int            @default(0)
  last_reset         DateTime       @default(now())
  stripeSubscription Subscription[]
  accounts           Account[]
  sessions           Session[]
  fileMetadata       FileMetadata[]
  brains             Brain[]
  assistants         Assistant[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Sync file metadata with Pinecone
model FileMetadata {
  id           String   @id @default(cuid())
  metadataId   String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  fileName     String   @db.Text
  fileSize     Int
  contentType  String
  createdDate  String?
  modifiedDate String?
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  tokenCount   Int?
  wordCount    Int
  uploadDate   DateTime
  brains       Brain[]

  @@index([userId])
}

model Brain {
  id         String         @id @default(cuid())
  name       String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  size       Int? //word count
  user       User           @relation(fields: [userId], references: [id])
  userId     String
  files      FileMetadata[]
  assistants Assistant[]

  @@index([userId])
}

model Assistant {
  id              String     @id @default(cuid())
  name            String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  size            Int? //word count
  domains         String?    @db.Text //comma separated list of whitelisted domains
  initialMessages String?    @default("Hello") @db.Text //newline separated list of initial messages
  systemMessage   String?    @default("") @db.Text
  status          Status     @default(INACTIVE)
  visibility      Visibility @default(PRIVATE)
  user            User       @relation(fields: [userId], references: [id])
  userId          String
  brains          Brain[]

  @@index([userId])
}

enum Status {
  ACTIVE
  INACTIVE
}

enum Visibility {
  PUBLIC
  PRIVATE
}

// Store Stripe events
model StripeEvent {
  id               String   @id @unique
  api_version      String?
  data             Json
  request          Json?
  type             String
  object           String
  account          String?
  created          DateTime
  livemode         Boolean
  pending_webhooks Int
}

// Products are created and managed in Stripe and synced to our DB via Stripe webhooks
model Product {
  id          String   @id @map(name: "id")
  active      Boolean?
  name        String?
  description String?  @db.Text
  image       String?
  metadata    Json?
  Price       Price[]
}

// Prices are created and managed in Stripe and synced to our DB via Stripe webhooks
enum PricingType {
  one_time
  recurring
}

enum PricingPlanInterval {
  day
  week
  month
  year
}

model Price {
  id                String               @id @map(name: "id")
  active            Boolean?
  description       String?              @db.Text
  unit_amount       Int?
  currency          String?              @default("''") @db.Text
  type              PricingType?
  interval          PricingPlanInterval?
  interval_count    Int?
  trial_period_days Int?
  metadata          Json?
  product           Product              @relation(fields: [product_id], references: [id])
  product_id        String
  Subscription      Subscription[]

  @@index([product_id])
}

// Subscriptions are created and managed in Stripe and synced to our DB via Stripe webhooks
enum SubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
  paused
}

model Subscription {
  id                   String             @id @map(name: "id")
  status               SubscriptionStatus
  metadata             Json?
  price                Price?             @relation(fields: [price_id], references: [id])
  price_id             String?            @map(name: "price_id")
  quantity             Int?
  cancel_at_period_end Boolean?
  created              DateTime           @default(now())
  current_period_start DateTime           @default(now())
  current_period_end   DateTime           @default(now())
  ended_at             DateTime?
  cancel_at            DateTime?
  canceled_at          DateTime?
  trial_start          DateTime?
  trial_end            DateTime?
  user                 User               @relation(fields: [user_id], references: [id])
  user_id              String             @map(name: "user_id")

  @@index([price_id])
  @@index([user_id])
}

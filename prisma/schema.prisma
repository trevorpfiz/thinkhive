// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  id_token_expires_in      Int?
  session_state            String?
  not_before               Int?
  profile_info             String? @db.Text
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  fileMetadata  FileMetadata[]
  brains        Brain[]
  experts       Expert[]
  apiCalls      ApiCall[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Sync file metadata with Pinecone
model FileMetadata {
  id           String   @id @default(cuid())
  metadataId   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  fileName     String
  fileSize     Int
  contentType  String
  createdDate  String?
  modifiedDate String?
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  tokenCount   Int?
  wordCount    Int
  uploadDate   DateTime
  brains       Brain[]

  @@index([userId])
}

model Brain {
  id        String         @id @default(cuid())
  name      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  size      Int //word count
  user      User           @relation(fields: [userId], references: [id])
  userId    String
  files     FileMetadata[]
  experts   Expert[]

  @@index([userId])
}

model Expert {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  size      Int //word count
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  brains    Brain[]

  @@index([userId])
}

model ApiCall {
  id               String   @id @default(cuid())
  timestamp        DateTime
  endpoint         String //URL of API call, "https://api.openai.com/v1/chat/completions"
  model            String //ID of the model used, "gpt-3.5-turbo"
  tokensUsed       Int
  responseCode     Int //HTTP status code
  responseTimeMs   Int
  billingPeriod    String //"2022-01-01/2022-01-30"
  subscriptionType String //"monthly" or "annual"

  requestBody  String //input text sent to the model??? data storage?
  responseBody String //response of the model???        data size?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([userId])
}
